package beyondcollection;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Hombre
 */
public class BCAccountManagement extends javax.swing.JFrame {

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    
    public BCAccountManagement() {
        initComponents();
        Connect1();
        loadTableData(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        contactNumber = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        username1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        name1 = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        password1 = new javax.swing.JTextField();
        btnView = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BC Account Management");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Username:");

        contactNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactNumberActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Name:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Password:");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null}
        },
        new String [] {
            "User _ID", "Name", "Password", "Contact No.", "Role", "Subscription Type", "Points"
        }
    ));
        jScrollPane1.setViewportView(jTable1);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Contact No.");

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(49, 49, 49)
                                .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(27, 27, 27)
                                .addComponent(password1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(contactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(username1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearch)
                                .addGap(36, 36, 36)
                                .addComponent(btnView))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(backBtn)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(username1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(password1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnView)
                            .addComponent(btnSearch))))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>                        

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {                                       
        try {
            String uId = username1.getText();
            String uName = name1.getText();
            String uPass = password1.getText();
            String cNumber = contactNumber.getText();
            
            pst = con.prepareStatement("SELECT * FROM users WHERE USER_ID=? or NAME=?");
            pst.setString(1, uId);
            pst.setString(2, uName);
            rs = pst.executeQuery();
           
            if (rs.next()){
                JOptionPane.showMessageDialog(this, "This user already exists");
            }else{
                pst = con.prepareStatement("INSERT INTO users (USER_ID, NAME, PASSWORD, `CONTACT NO`) VALUES (?, ?, ?, ?)");
                pst.setString(1, uId);
                pst.setString(2, uName);
                pst.setString(3, uPass);
                pst.setString(4, cNumber);
                
                int k = pst.executeUpdate();
                
                if(k==1){
                    JOptionPane.showMessageDialog(this, "User Added Successfully");
                    username1.setText("");
                    name1.setText("");
                    password1.setText("");
                    contactNumber.setText("");
                    loadTableData();
                    
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(BCAccountManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }                                      

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {                                          
        try{
            String uID = username1.getText();
            String name = name1.getText();
            String pass = password1.getText();
            String contact = contactNumber.getText();
            
            if (uID.isEmpty() || name.isEmpty() || pass.isEmpty() || contact.isEmpty()){
                JOptionPane.showMessageDialog(this, "Please fill in all fields.");
                return;
            }
            
            pst = con.prepareStatement("UPDATE users SET USER_ID=?, NAME=?, PASSWORD=?, `CONTACT NO`=?");
            pst.setString(1, uID);
            pst.setString(2, name);
            pst.setString(3, pass);
            pst.setString(4, contact);
            
            int k = pst.executeUpdate();
            
            if (k == 1){
                JOptionPane.showMessageDialog(this, "Record Updated Successfully!");
                loadTableData();
            }else{
                JOptionPane.showMessageDialog(this, "Failed to Update Record");
            }
        }catch (SQLException ex){
            Logger.getLogger(BCAccountManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }                                         

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
       try {
            String uId = username1.getText();

            if (uId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a User ID to delete.");
                return;
            }

            pst = con.prepareStatement("DELETE FROM users WHERE USER_ID=?");
            pst.setString(1, uId);

            int k = pst.executeUpdate();

            if (k == 1) {
                JOptionPane.showMessageDialog(this, "Record Deleted Successfully!");
                username1.setText("");
                name1.setText("");
                password1.setText("");
                contactNumber.setText("");
                loadTableData();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to Delete Record");
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(ProdManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }                   

    private void contactNumberActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {                                        
    	 String username = username1.getText();
         StringBuilder message = new StringBuilder("Your Orders:\n");
         String query = "SELECT * FROM orders WHERE username = ?";

         try {
             PreparedStatement pstmt = con.prepareStatement(query);
             pstmt.setString(1, username);
             ResultSet rs = pstmt.executeQuery();

             if (!rs.isBeforeFirst()) { 
                 JOptionPane.showMessageDialog(this, "You have no orders.");
                 return;
             }

             while (rs.next()) {
                 int productId = rs.getInt("product_id");
                 String productName = rs.getString("product_name");
                 int quantity = rs.getInt("quantity");
                 double totalPrice = rs.getDouble("total_price");
                 String status = rs.getString("status");
                 message.append("Product ID: ").append(productId)
                        .append(", Product Name: ").append(productName)
                        .append(", Quantity: ").append(quantity)
                        .append(", Total Price: $").append(totalPrice)
                        .append(", Status: ").append(status).append("\n");
             }

             JOptionPane.showMessageDialog(this, message.toString(), "Order History", JOptionPane.INFORMATION_MESSAGE);
             rs.close();
             pstmt.close();
         } catch (SQLException e) {
             e.printStackTrace();
             JOptionPane.showMessageDialog(this, "Error retrieving orders: " + e.getMessage());
         }
    }                                       

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        AdminDashboard adminDash = new AdminDashboard();
        adminDash.setVisible(true);
        this.dispose();
    }                                       

     private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {                                          
           try {
        String uId = username1.getText();
        
        pst = con.prepareStatement("SELECT * FROM users WHERE USER_ID=?");
        pst.setString(1, uId);
        rs = pst.executeQuery();
        
        if(rs.next()) {
           username1.setText(rs.getString("USER_ID")); 
           name1.setText(rs.getString("NAME")); 
           password1.setText(rs.getString("PASSWORD")); 
           contactNumber.setText(rs.getString("CONTACT NO"));
            
        } else {
            JOptionPane.showMessageDialog(this, "User not found!"); 
        }
                  
        }catch (SQLException ex) {
            Logger.getLogger(ProdManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }                                         

    private void btnEarnPointsActionPerformed(java.awt.event.ActionEvent evt) {
        int userId = Integer.parseInt(username1.getText()); // Assume username1 contains the user's ID
        double amountSpent = Double.parseDouble(JOptionPane.showInputDialog("Enter amount spent:"));
        earnPoints(userId, amountSpent);
    }
    private void earnPoints(int userId, double amountSpent) {
		// TODO Auto-generated method stub
		
	}

	private void btnRedeemPointsActionPerformed(java.awt.event.ActionEvent evt) {
        int userId = Integer.parseInt(username1.getText());
        int pointsToRedeem = Integer.parseInt(JOptionPane.showInputDialog("Enter points to redeem:"));
        redeemPoints(userId, pointsToRedeem);
    }

     private void redeemPoints(int userId, int pointsToRedeem) {
		// TODO Auto-generated method stub
		
	}

	public void Connect1(){
       
       String url = "jdbc:mysql://localhost:3306/beyondcollection";
       String mySqlUser  = "root";
       String mySqlPass = "";
       
        try {
        con = DriverManager.getConnection(url, mySqlUser , mySqlPass);
        System.out.println("Connected!");
        } catch (SQLException e) {
        e.printStackTrace(); 
       
        javax.swing.JOptionPane.showMessageDialog(this, "Connection failed: " + e.getMessage());
    }
   }
    private void loadTableData() {
    try {
        String query = "SELECT USER_ID, NAME, PASSWORD, `CONTACT NO`, ROLE, SUBSCRIPTION_TYPE, POINTS FROM users"; 
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); 
        
        while (rs.next()) {
            String id = rs.getString("USER_ID"); 
            String name = rs.getString("NAME");
            String pass = rs.getString("PASSWORD");
            String contact = rs.getString("CONTACT NO");
            String role = rs.getString("ROLE");
            String subType = rs.getString("SUBSCRIPTION_TYPE");
            int points = rs.getInt("POINTS");

            model.addRow(new Object[]{id, name, pass, contact, role, subType, points}); 
        }
        
        rs.close();
        stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BCAccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BCAccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BCAccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BCAccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BCAccountManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JTextField contactNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField name1;
    private javax.swing.JTextField password1;
    private javax.swing.JTextField username1;
    // End of variables declaration                   
}
