/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package beyondcollection;

import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
/**
 *
 * @author Hombre
 */
public class ProdManagement extends javax.swing.JFrame {

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    File f = null;
    String path = null;
    private ImageIcon format = null;
    String fname=null;
    private byte[] imageData;
    /**
     * Creates new form ProdManagement
     */
    public ProdManagement() {
    initComponents();
    Connect();
    loadTableData(); 
    
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        prodPrice = new javax.swing.JTextField();
        prodID = new javax.swing.JTextField();
        prodQty = new javax.swing.JTextField();
        prodName = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        prodCat = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BC Product Management");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Product Name: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Product Price: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Product Qty: ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Product ID: ");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Product ID", "Product Name", "Category", "Price", "No. of Stocks", "Image" // Add "Image" column
            }
        ));
        jTable1.getColumn("Image").setCellRenderer(new ImageRenderer());
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        prodCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nendoroids", "Funko Pops", "Plushie", "Pop Up Parade" }));
        prodCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodCatActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Product Category:");

        imageLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(165, 165, 165))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(prodName, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(prodID, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(prodPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(prodQty, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(55, 55, 55)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnSearch))
                                    .addComponent(prodCat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(86, 86, 86)
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(backBtn)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(prodID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(prodName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(prodPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prodQty, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(prodCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete))
                        .addGap(171, 171, 171)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
    try {
        String pID = prodID.getText();
        String pName = prodName.getText();
        String pCat = prodCat.getSelectedItem().toString();
        String pPrice = prodPrice.getText();
        String pQty = prodQty.getText();

        String imagePath = selectImage();
        if (imagePath == null) {
            JOptionPane.showMessageDialog(this, "Please select an image for the product!");
            return;
        }
        
        imageData = readImageFile(imagePath); 
        displayImage(imageData);
        
        pst = con.prepareStatement("SELECT * FROM products WHERE PRODUCT_ID=? OR NAME=?");
        pst.setString(1, pID);
        pst.setString(2, pName);
        rs = pst.executeQuery();

        if (rs.next()) {
            JOptionPane.showMessageDialog(this, "Product with this ID or Name already exists!");
        } else {
            pst = con.prepareStatement("INSERT INTO products (PRODUCT_ID, NAME, PRICE, `NO. OF STOCKS`, CATEGORY, IMAGE) VALUES (?, ?, ?, ?, ?, ?)");
            pst.setString(1, pID);
            pst.setString(2, pName);
            pst.setString(3, pPrice);
            pst.setString(4, pQty);
            pst.setString(5, pCat);
            pst.setBytes(6, imageData); // Store image data as BLOB

            int k = pst.executeUpdate();

            if (k == 1) {
                JOptionPane.showMessageDialog(this, "Record Added Successfully!");
                prodID.setText("");
                prodName.setText("");
                prodPrice.setText("");
                prodQty.setText("");
                loadTableData();
                displayImage(imageData);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to Add Record");
            }
        }
    } catch (SQLException ex) {
        Logger.getLogger(ProdManagement.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }catch (IOException ex) {
        Logger.getLogger(ProdManagement.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error reading image: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnAddActionPerformed

    private void prodCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodCatActionPerformed
        
       
    }//GEN-LAST:event_prodCatActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            String pID = prodID.getText();
            String pName = prodName.getText();
            String pCat = prodCat.getSelectedItem().toString();
            String pPrice = prodPrice.getText();
            String pQty = prodQty.getText();

            if (pID.isEmpty() || pName.isEmpty() || pPrice.isEmpty() || pQty.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields.");
                return;
            }

            pst = con.prepareStatement("UPDATE products SET NAME=?, PRICE=?, `NO. OF STOCKS`=?, CATEGORY=? WHERE PRODUCT_ID=?");
            pst.setString(1, pName);
            pst.setString(2, pPrice);
            pst.setString(3, pQty);
            pst.setString(4, pCat);
            pst.setString(5, pID);

            int k = pst.executeUpdate();

            if (k == 1) {
                JOptionPane.showMessageDialog(this, "Record Updated Successfully!");
                loadTableData(); 
            } else {
                JOptionPane.showMessageDialog(this, "Failed to Update Record");
            }
        } catch (SQLException ex) {
            Logger.getLogger(ProdManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
        String pID = prodID.getText();
        
        pst = con.prepareStatement("SELECT * FROM products WHERE PRODUCT_ID=?");
        pst.setString(1, pID);
        rs = pst.executeQuery();
        
        if(rs.next()) {
            prodName.setText(rs.getString("NAME")); 
            prodPrice.setText(rs.getString("PRICE")); 
            prodQty.setText(rs.getString("NO. OF STOCKS")); 
            
            String category = rs.getString("CATEGORY");
            prodCat.setSelectedItem(category); 
            
            byte[] imageData = rs.getBytes("IMAGE"); 
            if (imageData != null) {
                displayImage(imageData); 
            } else {
                imageLabel.setIcon(null); 
            }
        } else {
            JOptionPane.showMessageDialog(this, "Product not found!"); 
            imageLabel.setIcon(null); 
        }
                  
        } catch (SQLException ex) {
            Logger.getLogger(ProdManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            String pID = prodID.getText();

            if (pID.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a Product ID to delete.");
                return;
            }

            pst = con.prepareStatement("DELETE FROM products WHERE PRODUCT_ID=?");
            pst.setString(1, pID);

            int k = pst.executeUpdate();

            if (k == 1) {
                JOptionPane.showMessageDialog(this, "Record Deleted Successfully!");
                prodID.setText("");
                prodName.setText("");
                prodPrice.setText("");
                prodQty.setText("");
                imageLabel.setIcon(null);
                loadTableData(); 
            } else {
                JOptionPane.showMessageDialog(this, "Failed to Delete Record");
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(ProdManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        AdminDashboard adminDash = new AdminDashboard();
        adminDash.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private String selectImage() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select Product Image");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", "jpg", "jpeg", "png", "gif"));

        int userSelection = fileChooser.showOpenDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToUpload = fileChooser.getSelectedFile();
            return fileToUpload.getAbsolutePath();
        }
        return null; 
    }
    
    private byte[] readImageFile(String imagePath) throws IOException {
        File imageFile = new File(imagePath);
        FileInputStream fis = new FileInputStream(imageFile);
        byte[] imageData = new byte[(int) imageFile.length()];
        fis.read(imageData);
        fis.close();
        return imageData;
    }
    
    private void displayImage (byte[] imageData) {
    if (imageData != null) {
        ImageIcon imageIcon = new ImageIcon(imageData);
        Image image = imageIcon.getImage(); // Get the image

        // Scale the image to fit the label dimensions
        Image scaledImage = image.getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);
        imageLabel.setIcon(new ImageIcon(scaledImage)); // Set the resized image to the label
        } else {
            imageLabel.setIcon(null); // Clear the image if no data
        }
    }   
    
   public void Connect(){
       
       String url = "jdbc:mysql://localhost:3306/beyondcollection";
       String mySqlUser  = "root";
       String mySqlPass = "";
       
        try {
        con = DriverManager.getConnection(url, mySqlUser , mySqlPass);
        System.out.println("Connected!");
        } catch (SQLException e) {
        e.printStackTrace(); 
       
        javax.swing.JOptionPane.showMessageDialog(this, "Connection failed: " + e.getMessage());
    }
   }
   
   private void loadTableData() {
    try {
         String query = "SELECT * FROM products";
         Statement stmt = con.createStatement();
         ResultSet rs = stmt.executeQuery(query);

         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         model.setRowCount(0); 

         while (rs.next()) {
             int id = rs.getInt("PRODUCT_ID");
             String cat = rs.getString("CATEGORY");
             String name = rs.getString("NAME");
             String price = rs.getString("PRICE");
             String qty = rs.getString("NO. OF STOCKS");
             byte[] imageData = rs.getBytes("IMAGE"); 

             model.addRow(new Object[]{id, name, cat, price, qty, imageData});
         }

         rs.close();
         stmt.close();

         // Set custom renderer for image column
         jTable1.getColumnModel().getColumn(5).setCellRenderer(new ImageRenderer());

         // Set preferred width for the image column
         jTable1.getColumnModel().getColumn(5).setPreferredWidth(100); // Adjust this value as needed

         jTable1.setRowHeight(100);
     } catch (SQLException e) {
         e.printStackTrace();
         JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
     }
    }
   
   
   public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new ProdManagement().setVisible(true);
            }
        });
    }
    class ImageRenderer extends JLabel implements TableCellRenderer {
    public ImageRenderer() {
        setHorizontalAlignment(JLabel.CENTER);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        if (value != null) {
            byte[] imageData = (byte[]) value;
            ImageIcon imageIcon = new ImageIcon(imageData);
            Image image = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH); // Resize image
            setIcon(new ImageIcon(image));
        } else {
            setIcon(null);
        }
        return this;
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> prodCat;
    private javax.swing.JTextField prodID;
    private javax.swing.JTextField prodName;
    private javax.swing.JTextField prodPrice;
    private javax.swing.JTextField prodQty;
    // End of variables declaration//GEN-END:variables
}
